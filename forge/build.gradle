plugins {
    id 'ml-loader'
    id 'net.minecraftforge.gradle' version '[6.0, 6.2)'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
}

base {
    archivesName = "${mod_id}-forge-1.20.6"
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor("org.spongepowered:mixin:0.8.5-SNAPSHOT:processor")

    implementation("net.xstopho.resourcelibrary:resourcelibrary-forge:${resource_library}")
}

minecraft {
    mappings channel: 'official', version: minecraft_version

    copyIdeResources = true // Calls processResources when in dev

    var at = file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) accessTransformer = at

    runs {
        client {
            workingDirectory project.file('runs/client')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('runs/client')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated'), '--existing', project(':common').file('src/main/resources/').getAbsolutePath()
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":common").sourceSets.main
                }
            }
        }

    }
}

jar.finalizedBy("reobfJar")

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}

publishMods {
    file = jar.archiveFile
    modLoaders.add("forge")

    modrinth { minecraftVersions.addAll('1.20.1', '1.20.2')}
    curseforge { minecraftVersions.addAll('1.20.1', '1.20.2')}
}